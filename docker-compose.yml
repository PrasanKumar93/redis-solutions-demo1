version: '3.8'
services:
  redis-server:
    container_name: redis-server
    #image: 'redislabs/redismod'
    image: 'redis/redis-stack-server'
    volumes:
      - redis-data:/data
    ports: # enable to visualize data in redis insight
      - '${REDIS_INSIGHT_PORT}:6379'

  # mongodb-server:
  #   container_name: mongodb-server
  #   image: 'mongo'
  #   volumes:
  #     - mongodb-data:/data/db
  #   ports: 
  #     - '${MONGODB_COMPASS_PORT}:27017'
  
  mongodb-server: # mongodb with replica for transactions support
    container_name: mongodb-server
    build:
      context: ./
      dockerfile: dockerfile-mongodb-replica
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: prisma
      MONGO_REPLICA_HOST: mongodb-server
      MONGO_REPLICA_PORT: 27017
    ports: # enable to visualize data in mongodb compass
      - '${MONGODB_COMPASS_PORT}:27017'
      # compass url is mongodb://localhost:27017/?directConnection=true

  mongodb-seed:
    container_name: mongodb-seed
    build:
      context: ./
      dockerfile: dockerfile-mongodb-seed
      args:
        BUILD_BASE_PATH: database
    env_file:
      - ./.env
    depends_on:
      - mongodb-server

  cdn:
    container_name: cdn
    build:
      context: ./
      dockerfile: dockerfile-cdn
      args:
        BUILD_BASE_PATH: cdn
    ports:
      - '${CDN_PORT}:80'

  orders-service:
    container_name: orders-service
    build:
      context: ./
      dockerfile: dockerfile-server
      args:
        BUILD_BASE_PATH: server/src/services/orders
    env_file:
      - ./.env
    depends_on:
      - redis-server
      - mongodb-server

  order-history-service:
    container_name: order-history-service
    build:
      context: ./
      dockerfile: dockerfile-server
      args:
        BUILD_BASE_PATH: server/src/services/order-history
    env_file:
      - ./.env
    depends_on:
      - redis-server
      - mongodb-server

  products-service:
    container_name: products-service
    build:
      context: ./
      dockerfile: dockerfile-server
      args:
        BUILD_BASE_PATH: server/src/services/products
    env_file:
      - ./.env
    depends_on:
      - redis-server
      - mongodb-server

  payments-service:
    container_name: payments-service
    build:
      context: ./
      dockerfile: dockerfile-server
      args:
        BUILD_BASE_PATH: server/src/services/payments
    env_file:
      - ./.env
    depends_on:
      - redis-server
      - mongodb-server
      - orders-service

  digital-identity-service:
    container_name: digital-identity-service
    build:
      context: ./
      dockerfile: dockerfile-server
      args:
        BUILD_BASE_PATH: server/src/services/digital-identity
    env_file:
      - ./.env
    depends_on:
      - redis-server
      - mongodb-server
      - payments-service

  profile-service:
    container_name: profile-service
    build:
      context: ./
      dockerfile: dockerfile-server
      args:
        BUILD_BASE_PATH: server/src/services/profile
    env_file:
      - ./.env
    depends_on:
      - redis-server
      - mongodb-server
      - payments-service

  api-gateway:
    container_name: api-gateway
    build:
      context: ./
      dockerfile: dockerfile-server
      args:
        BUILD_BASE_PATH: server/src/api-gateway
    ports:
      - '${API_GATEWAY_PORT}:${API_GATEWAY_PORT}'
    env_file:
      - ./.env
    depends_on:
      - orders-service
      - order-history-service
      - products-service
      - digital-identity-service

  client:
    container_name: client
    build:
      context: ./
      dockerfile: dockerfile-client
      args:
        BUILD_BASE_PATH: client/nextjs
        API_GATEWAY_URI: ${API_GATEWAY_URI}
        NEXT_PUBLIC_API_GATEWAY_URI: ${NEXT_PUBLIC_API_GATEWAY_URI}
    ports:
      - '${FRONTEND_CLIENT_PORT}:${FRONTEND_CLIENT_PORT}'
    env_file:
      - ./.env
    stdin_open: true # -i input flag
    tty: true # -t terminal flag
    depends_on:
      - api-gateway
      - cdn

volumes:
  redis-data:
  mongodb-data:
